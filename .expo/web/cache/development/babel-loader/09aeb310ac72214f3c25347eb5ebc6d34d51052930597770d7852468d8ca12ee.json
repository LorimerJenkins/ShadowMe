{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Svg, { G, Circle } from 'react-native-svg';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar defaultProps = {\n  rotation: -90,\n  length: 150,\n  zeroTotalCircleColor: '#F1F6F9',\n  containerProps: {},\n  svgProps: {},\n  gProps: {},\n  circleProps: {}\n};\nvar CircleWrapper = function CircleWrapper(props) {\n  return React.createElement(Circle, _extends({\n    cx: \"50%\",\n    cy: \"50%\",\n    fill: \"transparent\"\n  }, props));\n};\nvar PieChartComponent = function PieChartComponent(_ref) {\n  var data = _ref.data,\n    length = _ref.length,\n    rotation = _ref.rotation,\n    zeroTotalCircleColor = _ref.zeroTotalCircleColor,\n    containerProps = _ref.containerProps,\n    svgProps = _ref.svgProps,\n    gProps = _ref.gProps,\n    circleProps = _ref.circleProps;\n  var _useMemo = useMemo(function () {\n      var newStrokeWidth = length * 0.25;\n      var newRadius = length / 2 - newStrokeWidth / 2;\n      return {\n        strokeWidth: newStrokeWidth,\n        radius: newRadius,\n        circleCircumference: 2 * Math.PI * newRadius\n      };\n    }, [length]),\n    strokeWidth = _useMemo.strokeWidth,\n    radius = _useMemo.radius,\n    circleCircumference = _useMemo.circleCircumference;\n  var _useMemo2 = useMemo(function () {\n      var newTotal = data.reduce(function (prev, current) {\n        return prev + current.count;\n      }, 0);\n      var newFilledData = data.reduce(function (prev, current, i) {\n        var percentage = current.count / newTotal * 100;\n        prev.push(_objectSpread(_objectSpread({}, current), {}, {\n          percentage: percentage,\n          strokeDashoffset: circleCircumference - circleCircumference * percentage / 100,\n          angle: (i === 0 ? 0 : prev[i - 1].angle) + current.count / newTotal * 360\n        }));\n        return prev;\n      }, []);\n      return {\n        total: newTotal,\n        filledData: newFilledData\n      };\n    }, [circleCircumference, data]),\n    total = _useMemo2.total,\n    filledData = _useMemo2.filledData;\n  return React.createElement(View, _extends({\n    style: styles.container\n  }, containerProps), React.createElement(Svg, _extends({\n    height: length.toString(),\n    width: length.toString(),\n    viewBox: `0 0 ${length} ${length}`\n  }, svgProps), React.createElement(G, _extends({\n    rotation: rotation,\n    originX: length / 2,\n    originY: length / 2\n  }, gProps), total === 0 ? React.createElement(CircleWrapper, _extends({\n    r: radius,\n    stroke: zeroTotalCircleColor,\n    strokeWidth: strokeWidth\n  }, circleProps)) : filledData.map(function (item, i, arr) {\n    return React.createElement(CircleWrapper, _extends({\n      key: item.key,\n      r: radius,\n      stroke: item.color,\n      strokeWidth: strokeWidth,\n      strokeDasharray: circleCircumference,\n      strokeDashoffset: item.strokeDashoffset,\n      rotation: i === 0 ? 0 : arr[i - 1].angle,\n      originX: length / 2,\n      originY: length / 2,\n      strokeLinecap: \"round\"\n    }, circleProps));\n  }))));\n};\nPieChartComponent.defaultProps = defaultProps;\nvar PieChart = React.memo(PieChartComponent);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport { PieChart as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["import React, { useMemo } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Svg, { G, Circle } from 'react-native-svg';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst defaultProps = {\n  rotation: -90,\n  length: 150,\n  zeroTotalCircleColor: '#F1F6F9',\n  containerProps: {},\n  svgProps: {},\n  gProps: {},\n  circleProps: {}\n};\n\nconst CircleWrapper = props => /*#__PURE__*/React.createElement(Circle, _extends({\n  cx: \"50%\",\n  cy: \"50%\",\n  fill: \"transparent\" // eslint-disable-next-line react/jsx-props-no-spreading\n\n}, props));\n\nconst PieChartComponent = ({\n  data,\n  length,\n  rotation,\n  zeroTotalCircleColor,\n  containerProps,\n  svgProps,\n  gProps,\n  circleProps\n}) => {\n  const {\n    strokeWidth,\n    radius,\n    circleCircumference\n  } = useMemo(() => {\n    const newStrokeWidth = length * 0.25;\n    const newRadius = length / 2 - newStrokeWidth / 2;\n    return {\n      strokeWidth: newStrokeWidth,\n      radius: newRadius,\n      circleCircumference: 2 * Math.PI * newRadius\n    };\n  }, [length]);\n  const {\n    total,\n    filledData\n  } = useMemo(() => {\n    const newTotal = data.reduce((prev, current) => prev + current.count, 0);\n    const newFilledData = data.reduce((prev, current, i) => {\n      const percentage = current.count / newTotal * 100;\n      prev.push({ ...current,\n        percentage,\n        strokeDashoffset: circleCircumference - circleCircumference * percentage / 100,\n        angle: (i === 0 ? 0 : prev[i - 1].angle) + current.count / newTotal * 360\n      });\n      return prev;\n    }, []);\n    return {\n      total: newTotal,\n      filledData: newFilledData\n    };\n  }, [circleCircumference, data]);\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: styles.container // eslint-disable-next-line react/jsx-props-no-spreading\n\n  }, containerProps), /*#__PURE__*/React.createElement(Svg, _extends({\n    height: length.toString(),\n    width: length.toString(),\n    viewBox: `0 0 ${length} ${length}` // eslint-disable-next-line react/jsx-props-no-spreading\n\n  }, svgProps), /*#__PURE__*/React.createElement(G, _extends({\n    rotation: rotation,\n    originX: length / 2,\n    originY: length / 2 // eslint-disable-next-line react/jsx-props-no-spreading\n\n  }, gProps), total === 0 ? /*#__PURE__*/React.createElement(CircleWrapper, _extends({\n    r: radius,\n    stroke: zeroTotalCircleColor,\n    strokeWidth: strokeWidth // eslint-disable-next-line react/jsx-props-no-spreading\n\n  }, circleProps)) : filledData.map((item, i, arr) => /*#__PURE__*/React.createElement(CircleWrapper, _extends({\n    key: item.key,\n    r: radius,\n    stroke: item.color,\n    strokeWidth: strokeWidth,\n    strokeDasharray: circleCircumference,\n    strokeDashoffset: item.strokeDashoffset,\n    rotation: i === 0 ? 0 : arr[i - 1].angle,\n    originX: length / 2,\n    originY: length / 2,\n    strokeLinecap: \"round\" // eslint-disable-next-line react/jsx-props-no-spreading\n\n  }, circleProps))))));\n};\n\nPieChartComponent.defaultProps = defaultProps;\nconst PieChart = /*#__PURE__*/React.memo(PieChartComponent);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nexport { PieChart as default };\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}